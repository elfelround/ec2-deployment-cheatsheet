Step 6: Configure Security Group
SSH > Source > my IP
add HTTP & HTTPS > Source > Anywhere  //On AWS, for example, you may need to con‐
figure the “security group” for your server to open port 80
Step 7: Create a new pair > download

// from dj2 apache creates user grants sudo digoc linode YES apache sqlite NO nginx superagent

sudo apt-get update
sudo apt-get -y upgrade

//sudo apt-get -y install supervisor  //we will be using systemd instead //can jump into venv files and run stuff from inside them (celery)

hostnamectl set-hostname <what-ever>
nano ect/hosts
// add here the hosts changes


adduser  <whatevername> 
adduser <whatevername> sudo  // or gpasswd -a whatevername sudo          su - whatevername (switch to recently created user)

ssh root@... > ssh <limiteduser>@... //ssh logout and login back with the command we previously used changing ubuntu for the new name

sudo apt-get install ufw 
sudo ufw default allow outgoing
sudo ufw default deny incoming
sudo ufw allow 22  // allowo ssh didnt work still havent tried OpenSSH
sudo ufw allow 80
sudo ufw enable
sudo reboot

timeskip

sudo apt-get -y install git
export SITENAME=ericktestforasite.com    //so we will be making a root folder with the name of the site and putting the code on the source folder
git clone https://adfasdfasdf.git \
~/sites/$SITENAME/source

timeskip

sudo apt-get -y install nginx
sudo systemctl start nginx
sudo ufw allow ‘Nginx Full’  // opens 80 and 443 https

sudo apt install python3 python3-venv
pwd  // what dir are we in?
//example output of pwd   /home/espeth/sites/staging.superlists.com/source    //we want to create the venv paralell but outside to source, so make sure to cd to the root or just use ../to go up one lvl
python3(or python3.6) -m venv ../virtualenv   //setting the route where we will make virtualenv
../virtualenv/bin/pip install -r requirements.txt  //we are calling the pip (not pip3 or whatever, just pip) inside the virtualenv instead of executing the virtual environment
//will install django and not much more

../virtualenv/bin/pip install gunicorn // TDD py 175
../virtualenv/bin/gunicorn <whateverproject>.wsgi:application  //callin the application function from within the wsgi file from within the venv gunicorn (without actually activating venv)
//at this point all CSS is broken, runserver serves static but gunicorn doesnt, its time to tell nginx to do that

../virtualenv/bin/python manage.py collectstatic --noinput
ls ../static/

nginx>> //adding location /static to the config 177

server {
listen 80;
server_name superlists-staging.ottg.eu;
location /static {
alias /home/elspeth/sites/superlists-staging.ottg.eu/static;
}
location / {
proxy_pass http://localhost:8000;
}
}
-------

sudo systemctl reload nginx
../virtualenv/bin/gunicorn superlists.wsgi:application

proxy settings in Nginx so we can test and production same time


[...]
location / {
proxy_set_header Host $host;
proxy_pass http://unix:/tmp/superlists-staging.ottg.eu.socket;
}
}


179 systemd

/etc/systemd/system/   <whatever>    .service  // must live on this folder and have this suffix

    [Unit]
    Description=Gunicorn server for superlists-staging.ottg.eu
    [Service]
    Restart=on-failure
    User=elspeth
    WorkingDirectory=/home/elspeth/sites/superlists-staging.ottg.eu/source
    ExecStart=/home/elspeth/sites/superlists-staging.ottg.eu/virtualenv/bin/gunicorn \
    --bind unix:/tmp/superlists-staging.ottg.eu.socket \
    superlists.wsgi:application
    [Install]
    WantedBy=multi-user.target

sudo systemctl daemon-reload


//Creating a virtualenv “manually” (i.e., without virtualenvwrapper ) involves using
the standard library “venv” module, and specifying the path you want the virtualenv
to go in sudo apt-get install python3.6 python3.6-venv  elspeth@server:$ python3.6 -m venv ../virtualenv

git pull // to pull new changes from the server


